# -*- coding: utf-8 -*-
"""Create Excel Report of single evaluation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e1nodUSnwiIiUz7oNoXgVzGg6y2Uxk_7
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install -qU python-iso639 pycm

from pathlib import Path
import sys
import shutil
import json

import pandas as pd
import seaborn as sns
import sklearn
from sklearn.metrics import ConfusionMatrixDisplay
import numpy as np
import iso639
import pycm
import openpyxl
from openpyxl.utils.cell import get_column_letter

import global_id_utils

report_template_path: Path = Path("/app/report template.xlsx")

model_id = sys.argv[1]
dataset_id = sys.argv[2]

model_output_dir: Path = Path("/output/") / Path(model_id.replace("/", "_") + " on " + dataset_id.replace("/", "_"))

report_output_dir = model_output_dir / "reports"
report_output_dir.mkdir(exist_ok=True)

predictions = (pd
                .read_json(model_output_dir / "predictions.json")
                .rename(columns={
                  "predictions": "predicted_id",
                  "labels": "true_id"
                }))

"""# Create report sheets"""

predictions["predicted_lang"] = predictions["predicted_id"].map(lambda x: global_id_utils.global_id_to_lang(x).name)
predictions["predicted_lang_abrev"] = predictions["predicted_id"].map(global_id_utils.global_id_to_iso639_part3)

predictions["true_lang"] = predictions["true_id"].map(lambda x: global_id_utils.global_id_to_lang(x).name)
predictions["true_lang_abrev"] = predictions["true_id"].map(global_id_utils.global_id_to_iso639_part3)

predictions["correct"] = (predictions["predicted_id"] == predictions["true_id"])

"""## Performance"""

with open(model_output_dir / "metadata.json", "r") as metadata_file:
  metadata = json.load(metadata_file)

"""## Confusion Matrix"""

cm = pycm.ConfusionMatrix(predictions["true_lang"].to_list(), predictions["predicted_lang"].to_list())

cm_pd = pd.DataFrame(cm.table)

disp = ConfusionMatrixDisplay.from_predictions(
  predictions["true_lang"],
  predictions["predicted_lang"],
  # cmap=plt.cm.Blues,
  normalize="true",
  include_values=False,
  text_kw={"size": 4},
  xticks_rotation="vertical",
)
disp.ax_.set_title("Confusion matrix, normalized over true")
disp.ax_.tick_params(axis="both", which="major", labelsize=6)

disp.figure_.tight_layout()
disp.figure_.savefig(report_output_dir / "confusion_matrix_normalized_true.png")

# print(disp.confusion_matrix)

"""## Simple Class stats"""

stats_df = pd.DataFrame.from_dict(cm.class_stat)

simple_class_stats_df = pd.DataFrame()
# stats_df[["PPV", "TPR", "F1", "P", "PRE"]]
simple_class_stats_df[["Precision", "Recall/Sensitivity", "F1", "Support", "Prevalence"]] = stats_df[["PPV", "TPR", "F1", "P", "PRE"]]

true_langs_in_dataset = predictions["true_lang"].unique()

simple_class_stats_df = simple_class_stats_df[simple_class_stats_df.index.isin(true_langs_in_dataset)]

"""## Inference performance report"""

performance = pd.read_json(model_output_dir / "inference_metrics.json", typ='series')

performance = performance[["test_loss", "test_accuracy", "test_runtime", "test_samples_per_second", "test_steps_per_second"]]

performance.rename({
  "test_loss": "Loss",
  "test_accuracy": "Accuracy",
  "test_runtime": "Runtime (s)",
  "test_samples_per_second": "Samples/second",
  "test_steps_per_second": "Steps/second"
}, inplace=True)

performance["Total samples"] = len(predictions)

performance["Overall Accuracy"] = cm.Overall_ACC
performance["F1 Macro"] = cm.F1_Macro
performance["Kappa"] = cm.Kappa

print(cm.recommended_list)

"""# Output report"""

def write_performance(s: pd.Series, writer, metadata: dict):
  s.to_excel(writer, sheet_name="performance data")

  sheet = writer.book["performance"]
  sheet["B1"] = metadata["model_id"]
  sheet["B2"] = metadata["dataset_id"]

  monospace_font = openpyxl.styles.Font(name="Courier New", size=10)
  sheet["B1"].font = monospace_font
  sheet["B2"].font = monospace_font

def write_simple_class_stats(df: pd.DataFrame, writer):
  workbook = writer.book

  simple_class_stats_df.to_excel(writer, sheet_name="simple class stats")
  sheet = workbook["simple class stats"]
  for col in ["B", "C", "D", "F"]:
    for row in range(2, sheet.max_row + 1):
      sheet[f"{col}{row}"].number_format = "0.000"
  # Set "support" column to integers
  for row in range(2, sheet.max_row + 1):
    sheet[f"E{row}"].number_format = "0"

  sheet.column_dimensions["A"].width = 12

  per_language_chart = openpyxl.chart.BarChart()
  per_language_chart.type = "col"
  per_language_chart.style = 10
  per_language_chart.title = "Per language stats"
  per_language_chart.x_axis.title = "Language"

  f1_data = openpyxl.chart.Reference(sheet, min_col=4, min_row=2, max_row=1+len(df), max_col=4)
  f1_series = openpyxl.chart.Series(f1_data, title="F1")
  cats = openpyxl.chart.Reference(sheet, min_col=1, min_row=2, max_row=1+len(df))

  per_language_chart.append(f1_series)
  per_language_chart.set_categories(cats)
  per_language_chart.shape = 4
  sheet.add_chart(per_language_chart, "H1")

  img = openpyxl.drawing.image.Image(report_output_dir / "confusion_matrix_normalized_true.png")
  img.anchor = "H16"
  sheet.add_image(img)

def write_confusion_matrix(cm_pd, writer):
  workbook = writer.book

  cm_pd.to_excel(writer, sheet_name="confusion matrix")
  sheet = workbook["confusion matrix"]
  for column_cells in sheet.columns:
    sheet.column_dimensions[openpyxl.utils.get_column_letter(column_cells[0].column)].width = 20 * 1/7
  sheet.column_dimensions["A"].width = 60 * 1/7
  for row_cells in sheet.rows:
    sheet.row_dimensions[row_cells[0].row].height = 20 * 10/13
  sheet.row_dimensions[1].height = 60 * 10/13

  for col in range(1, len(cm_pd) + 2):
    sheet[openpyxl.utils.get_column_letter(col) + "1"].alignment = openpyxl.styles.alignment.Alignment(textRotation=90)

  rule = openpyxl.formatting.rule.ColorScaleRule(start_type="percentile", start_value=0, start_color="FFFFFF",
                        end_type="percentile", end_value=100, end_color="57BB8A")

  sheet.conditional_formatting.add("B2:" + get_column_letter(1 + len(cm_pd)) + str(1 + len(cm_pd)), rule)

shutil.copy(report_template_path, model_output_dir / "reports" / "report.xlsx")
with pd.ExcelWriter(model_output_dir / "reports" / "report.xlsx", engine="openpyxl", if_sheet_exists="replace", mode="a") as writer:
  workbook = writer.book
  write_performance(performance, writer, metadata)
  write_simple_class_stats(simple_class_stats_df, writer)
  predictions.to_excel(writer, sheet_name="predictions")
  stats_df.to_excel(writer, sheet_name="all stats")
  write_confusion_matrix(cm_pd, writer)

  writer.book.move_sheet("performance data", 5)

cm.save_html(str(model_output_dir / "reports" / "cm"))